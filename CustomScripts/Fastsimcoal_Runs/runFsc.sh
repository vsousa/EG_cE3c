#!/bin/bash

# Laurent Excoffier
# Last updated by Vitor Sousa, 20/01/2020
# The script will launch several runs of fastsimcoal to estimate
# demographic parameters from the SFS, using a
# conditional maximization (CM) of the parameter likelihood
# This should run on any kind of SFS files generated byfastsimcoal
#
# It assumes the following structure of the observed sfs files:
#	scriptDir
#   	|
#   	|- - - *.est file
#   	|- - - *.tpl file
#   	|- - - *.sh scripts
#   	|- - - fastsimcoal
#   	|- - - targetDir

# It requires the following arguments
# - poptag: tag of the populations analysed
# - tplEstTag: tag of the model, i.e. tag of the EST and TPL file 
#   NOTE: the resulting folders and file will be named tplEstTag
# - obsSFSfileTag: tag of the name of the file with the observed SFS 
#                  This can be anything, it does not need to be in the name format required by fastsimcoal2)
#                  NOTE: if you have multiple pairwise 2D SFS files, they are required to have 1_0, 2_0, 2_1, etc. indicating the pairwise comparison
# - obsFileEnding: tag for the ending of the SFS file according to fastsimcoal2 requirements:
#                  "DSFS.obs" for multiSFS derived allele
#                  "MSFS.obs" for multiSFS MAF
#                  "jointDAFpop1_0.obs" for 2D derived allele
#                  "jointMAFpop1_0.obs" for 2D MAF
#                  "DAFpop0.obs" for 1D derived allele
#                  "MAFpop0.obs" for 1D MAF

# Read arguments from command line
poptag=$1 
tplEstTag=$2
obsSFSfile=$3
obsFileEnding=$4

# DEBUG
#poptag=NCS 
#tplEstTag=nomig_S2B
#obsSFSfile=1000bp_dist2_ind3_4_5_MAF_nomon_DSFS.obs
#obsFileEnding="MSFS.obs"


echo "Launching Fastsimcoal2 analyses for ${obsSFSfile} for model ${tplEstTag}" 
echo "Output saved in folder ${poptag}-${tplEstTag}" 

################################################
# General settings - assumed equal to all models                           
# Please change the settings according to your model
################################################

##--- Name of the fastsimcoal2 executable
fsc=fsc26 
echo "Fastsimcoal version ${fsc}"

##--- Name of folder where the error and output log files will be saved
msgs=conOutput
echo "Error and log files saved in folder ${msgs}"

##--- Number of runs (this can be use to keep adding runs for each model)
runBase=1   # initial run number
numRuns=100 # final run number

##--- Fastsimcoal related parameters
# -n option
maxNumSims=100000	
# -L option
maxNumLoopsInBrentOptimization=50
# -C option
minValidSFSEntry=1
# -c option (Number of cores)
numCores=1  

#--Derived allele frequency sprectrum or Minor allele frequency spectrum?
# For minor allele frequency spectrum use "-m", 
# For derived allele frequency spectrum use "-d"
SFStype="-m"
#SFStype="-d"

#-- Monomorphic sites?
#useMonoSites=""    #Uncomment this line to use monomorphic sites
useMonoSites="-0" #Uncomment this line NOT to use monomorphic sites
quiet="-q" #-q option
	
#--multiSFS?
#multiSFS="" # Uncomment this line and comment next if you do not use the --multiSFS option
multiSFS="--multiSFS" #--multiSFS


###########################################
# CREATE FOLDERS TO RUN             
# This will re-name the observed SFS
# according to the tplEsttag
###########################################

# create a folder with the name of pops and tag of model
dirname=${poptag}-${tplEstTag} 
# if the folder with name dirname does not exist, create the folder
if [ ! -d "${dirname}" ]; 
then
	# mkdir stands for make directory
	mkdir ${dirname}	
fi

# Copy observed SFS file and rename it according to model
if [ ! -f "${dirname}/${dirname}_${obsFileEnding}" ]; 
then
	if [ -f "${obsSFSfile}" ];
	then
		cp ${obsSFSfile} ${dirname}/${dirname}_${obsFileEnding};
	fi
fi

# create a folder to put all the error and warning messages
mkdir ${msgs}_${dirname} 2>/dev/null


###################################
# RUN FASTSIMCOAL 
###################################

# Go to folder and perform the required number of runs
cd ${dirname}
for (( runsDone=$runBase; runsDone<=$numRuns; runsDone++ ))
do
	runDir="run$runsDone"
	echo "Performing run: ${runDir} of model ${dirname}"
	mkdir $runDir
	
	cd $runDir
	# Copying necessary files
	cp ../../${tplEstTag}.tpl . # copy TPL
	cp ../../${tplEstTag}.est . # copy EST
	cp ../${dirname}_${obsFileEnding} . # copy OBS
	#Renaming files for consistency
	mv ${tplEstTag}.tpl ${dirname}.tpl
	mv ${tplEstTag}.est ${dirname}.est

	# Run fastsimcoal
	../../$fsc -t ${dirname}.tpl -e ${dirname}.est -L$maxNumLoopsInBrentOptimization -n$maxNumSims $SFStype -M  $quiet ${useMonoSites} -C${minValidSFSEntry} ${multiSFS} -c${numCores} -B${numCores} > ../../${msgs}_${dirname}/run_${runDir}.out 2> ../../${msgs}_${dirname}/run_${runDir}.err
	# Pring command line to the screen
	echo "../../$fsc -t ${dirname}.tpl -e ${dirname}.est -L$maxNumLoopsInBrentOptimization -n$maxNumSims $SFStype -M  $quiet ${useMonoSites} -C${minValidSFSEntry} ${multiSFS} -c${numCores} -B${numCores}" | tee -a ../../$msgs_${dirname}/run_${runDir}.out
	
	# Go to parent folder 
	cd .. 
done

####################################
# COLLECT RESULTS 
####################################

summaryfile="${dirname}_ALL.param";
numFiles=1;
for (( runsDone=$runBase; runsDone<=$numRuns; runsDone++ ))
do		
   runDir="run$runsDone"
   if [ -d "$runDir" ];	
   then
	echo "---------------------------"
	echo "Getting results from: ${dirname}/${runDir}"
	echo ""		
	cd $runDir
	# if folder exists
	if [ -d ${dirname} ]; 
	then
		cd ${dirname}
		#Processing best likelihood file
		bestlhoodFile=${dirname}.bestlhoods
		echo "NumFiles=${numFiles}"
		# if file exists				
		if [ -f $bestlhoodFile ];
		then
			echo "File $bestlhoodFile exists."
			if [ $numFiles -lt 2 ]; 	
			then
				header=$(sed '1!d'  $bestlhoodFile)
				echo -e "File\t$header" > ../../${summaryfile}					
			fi

			#Extract second line
			wantedParameters=$(sed '2!d'  $bestlhoodFile)
			echo -e "${dirname}/${runDir}\t$wantedParameters" >> ../../${summaryfile}
			# increase the number of files read
			let numFiles=numFiles+1
		else
		   echo "File $bestlhoodFile does not exist for run ${runDir}."
		fi				
                # out of bestlhood folder
		cd ..				  				
	fi
	# out of run folder
	cd ..
	
   fi
done


